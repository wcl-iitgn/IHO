{"version":3,"file":"static/js/765.5e4d2136.chunk.js","mappings":"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","sources":["pages/ForecastDataPage.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { MapContainer, GeoJSON, ImageOverlay, LayersControl } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { setDragging, setInitialMapZoom } from '../functions/mapFunctions';\nimport BaseMap from '../components/BaseMap';\nimport { mapsLinks } from \"../assets/mapsLinks\"\nimport raster_map from \"../assets/pcp_7.gif\"\nimport indiastates from '../assets/data/indiaStates.json';\nimport indiaBasin from '../assets/data/indiaBasin.json';\nimport indiaDistrict from '../assets/data/indiaDistrict.json';\nimport indiaRivers from '../assets/data/indiaRivers.json';\n\nconst baseLayer = [\n    {\n        \"name\": \"States Boundary\",\n        \"geoJsonData\": indiastates,\n        \"style\": {\n            fillColor: 'none',\n            weight: 2,\n            color: 'black',\n            interactive: false\n        },\n        \"hoverFeature\": true\n    },\n    {\n        \"name\": \"District Boundary\",\n        \"geoJsonData\": indiaDistrict,\n        \"style\": {\n            weight: 0.2,\n            fillColor: \"black\",\n            fillOpacity: 0.00001,\n            // dashArray: 3,\n            color: 'black'\n        },\n        \"hoverFeature\": false\n    },\n    {\n        \"name\": \"River Basin Boundary\",\n        \"geoJsonData\": indiaBasin,\n        \"style\": {\n            fillColor: 'none',\n            weight: 2,\n            color: 'red',\n            interactive: false\n        },\n        \"hoverFeature\": false\n    },\n    {\n        \"name\": \"Rivers\",\n        \"geoJsonData\": indiaRivers,\n        \"style\": {\n            fillColor: 'none',\n            weight: 2,\n            color: 'blue',\n            interactive: false\n        },\n        \"hoverFeature\": false\n    },\n\n]\n\n\n\n\n\nconst ForecastDataPage = () => {\n    const [selectedMap, setSelectedMap] = useState(mapsLinks[10])\n    const [selectedLayers, setSelectedLayers] = useState([baseLayer[0], baseLayer[1]]);\n\n    const handleMapSelect = (item) => {\n        setSelectedMap(item);\n    };\n\n    const handleLayerToggle = (layer, isChecked) => {\n        if (isChecked) {\n            setSelectedLayers(prev => [...prev, layer]);  // Add the selected layer\n        } else {\n            setSelectedLayers(prev => prev.filter(l => l.name !== layer.name));  // Remove the layer\n        }\n    };\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        // Pre-bind the tooltip with a default message or properties\n        let popupContent = feature.properties?.District ? `${feature.properties.District}, ${feature.properties.STATE}` : 'No Info Available';\n        layer.bindTooltip(popupContent, { sticky: true });\n\n        layer.on('mouseover', function () {\n            layer.openTooltip();\n            layer.setStyle({\n                fillColor: '#eb4034',\n                weight: 1,\n                color: '#eb4034',\n                fillOpacity: 0.7,\n            });\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n            layer.setStyle({\n                fillColor: \"black\",\n                fillOpacity: 0.00001,\n                weight: 0.2,\n                color: 'black',\n            });\n        });\n    }\n\n\n\n\n\n    return (\n        <>\n\n            <div className='dasboard_page_container'>\n\n                <div className='main_dashboard'>\n                    <div className='left_panel'>\n\n\n                        <div className=\"accordion\" id=\"accordionExample\">\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseThree\">\n                                        Base Layers\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                                    <div className=\"accordion-body\">\n                                        {baseLayer.map((layer, index) => (\n                                            <div className=\"form-check\" key={index}>\n\n                                                <label className=\"form-check-label\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"checkbox\"\n                                                        checked={selectedLayers.some(selectedLayer => selectedLayer.name === layer.name)}\n                                                        onChange={(e) => handleLayerToggle(layer, e.target.checked)}\n                                                    />\n                                                    {layer.name}\n                                                </label>\n                                            </div>\n                                        ))}\n\n\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"headingOne\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                                        Meteorological conditions\n                                    </button>\n                                </h2>\n                                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\">\n                                    <div className=\"accordion-body\">\n                                        <strong>Forecasted meteorological conditions</strong>\n                                        {mapsLinks.filter(item => item.section === \"Forecasted_meteorological_conditions\").map((item, index) => (\n                                            <div className=\"form-check\" key={index}>\n\n                                                <label className=\"form-check-label\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"radio\"\n                                                        name=\"flexRadioDefault\"\n                                                        checked={selectedMap.label === item.label}\n                                                        onChange={() => handleMapSelect(item)}\n                                                    />\n\n                                                    {item.label}\n                                                </label>\n                                            </div>\n                                        )\n\n                                        )}\n\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"headingTwo\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"true\" aria-controls=\"collapseTwo\">\n                                        Hydrological conditions\n                                    </button>\n                                </h2>\n                                <div id=\"collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingTwo\" >\n                                    <div className=\"accordion-body\">\n                                        <strong>Forecasted Hydrological conditions</strong>\n\n                                        {mapsLinks.filter(item => item.section === \"Forecasted_hydrological_conditions\").map((item, index) => (\n                                            <div className=\"form-check\" key={index}>\n\n                                                <label className=\"form-check-label\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"radio\"\n                                                        name=\"flexRadioDefault\"\n                                                        checked={selectedMap.label === item.label}\n                                                        onChange={() => handleMapSelect(item)}\n                                                    />\n                                                    {item.label}\n                                                </label>\n                                            </div>\n                                        )\n\n                                        )}\n\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"heading4\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse4\" aria-expanded=\"true\" aria-controls=\"collapse4\">\n                                        Drought conditions\n                                    </button>\n                                </h2>\n                                <div id=\"collapse4\" className=\"accordion-collapse collapse show\" aria-labelledby=\"heading4\" >\n                                    <div className=\"accordion-body\">\n                                        <strong>Forecasted Droughts conditions</strong>\n\n                                        {mapsLinks.filter(item => item.section === \"Droughts\").map((item, index) => (\n                                            <div className=\"form-check\" key={index}>\n\n                                                <label className=\"form-check-label\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"radio\"\n                                                        name=\"flexRadioDefault\"\n                                                        checked={selectedMap.label === item.label}\n                                                        onChange={() => handleMapSelect(item)}\n                                                    />\n                                                    {item.label}\n                                                </label>\n                                            </div>\n                                        )\n\n                                        )}\n\n                                    </div>\n                                </div>\n                            </div>\n\n\n                        </div>\n\n                    </div>\n                    <div className='right_panel'>\n\n                        <MapContainer\n                            fullscreenControl={true}\n\n\n                            center={[23, 84]}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white',  margin: 'auto', border:\"1px solid grey\" }}\n                            zoom={setInitialMapZoom()}\n                            // maxBounds={maxBounds}\n                            // maxZoom={8}\n                            maxBounds={[[8, 98], [38, 68]]}\n                            minZoom={setInitialMapZoom()}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n                            doubleClickZoom={false}\n                        >\n\n                            {selectedLayers && selectedLayers.length > 0 &&\n                                selectedLayers.map((layer, index) => (\n                                    <GeoJSON\n                                        data={layer.geoJsonData.features}\n                                        style={layer.style}\n                                        key={index + layer.name}\n                                        onEachFeature={DistrictOnEachfeature}  // Add hover functionality only to layers with `hoverFeature`\n                                    />\n                                ))}\n\n\n\n\n                            {selectedMap &&\n                                <>\n                                    <ImageOverlay\n                                        // url={raster_map}\n                                        url={selectedMap.url}\n                                        fitBounds={true}\n                                        bounds={[[5.9484095274736717, 98.3478180095000880], [37.9663826133689355, 60.8240580598229599]]}\n                                        opacity={1}\n                                        // attribution={layer.attribution}\n                                        key={selectedMap.name}\n                                    />\n\n                                    <div className='legend-panel-desktop' style={selectedMap.section === \"Droughts\" ? { width: \"450px\" } : { width: \"100px\" }} >\n                                        <p>{selectedMap.label}</p>\n                                        <img src={selectedMap.legend} alt=\"legend\" />\n                                    </div>\n\n\n                                </>\n                            }\n\n\n                            <BaseMap />\n\n\n\n\n\n\n\n\n\n                        </MapContainer>\n\n                    </div>\n                </div>\n            </div>\n\n        </>\n\n    )\n}\n\nexport default ForecastDataPage"],"names":["baseLayer","indiastates","fillColor","weight","color","interactive","indiaDistrict","fillOpacity","indiaBasin","indiaRivers","ForecastDataPage","selectedMap","setSelectedMap","useState","mapsLinks","selectedLayers","setSelectedLayers","handleMapSelect","item","DistrictOnEachfeature","feature","layer","_feature$properties","popupContent","properties","District","STATE","bindTooltip","sticky","on","openTooltip","setStyle","closeTooltip","_jsx","_Fragment","children","className","_jsxs","id","type","map","index","checked","some","selectedLayer","name","onChange","e","handleLayerToggle","isChecked","prev","filter","l","target","section","label","MapContainer","fullscreenControl","center","style","width","height","backgroundColor","margin","border","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","length","GeoJSON","data","geoJsonData","features","onEachFeature","ImageOverlay","url","fitBounds","bounds","opacity","src","legend","alt","BaseMap"],"sourceRoot":""}